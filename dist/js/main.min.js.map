{"version":3,"sources":["main.js"],"names":["$","document","ready","setDate","now","Date","seconds","getSeconds","secondDegrees","$secondsArrow","css","min","getMinutes","minDegrees","$minArrow","hours","getHours","hoursDegrees","$hoursArrow","handleUpdate","$suffix","this","attr","documentElement","style","setProperty","name","value","toggleOpen","hasClass","removeClass","panels","each","addClass","on","toggleAcive","e","originalEvent","propertyName","includes","findMatches","wordToMatch","cities","filter","place","regex","RegExp","city","match","state","displayMatches","_this","matchArray","htmlIn","map","cityName","replace","stateName","population","join","suggestions","html","makeGreen","color","font-size","setInterval","inputs","endpoint","fetch","then","blob","json","data","push","apply","_toConsumableArray","searchInput","dogs","age","console","log","warn","error","info","clear","groupCollapsed","groupEnd","count","age2","players","team","team2","slice","team3","concat","team4","team5","Array","from","person14","newPerson","number","newPerson2","Object","assign","viktor","social","git","mail","time","viktor2","timeEnd","viktor3","JSON","parse","stringify"],"mappings":"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","file":"main.min.js","sourcesContent":["$(document).ready(function () {\r\n\r\n\r\n\r\n\r\n\r\n    /** LESSON 2 **/\r\n    /* arrows variables */\r\n    const $secondsArrow = $('.second-hand');\r\n    const $minArrow = $('.min-hand');\r\n    const $hoursArrow = $('.hour-hand');\r\n\r\n    /* main function */\r\n    function setDate() {\r\n        const now = new Date();\r\n\r\n        /* seconds settings */\r\n        const seconds = now.getSeconds();\r\n        const secondDegrees = ((seconds / 60) * 360) + 90;\r\n        $secondsArrow.css('transform', `rotate(${secondDegrees}deg)`);\r\n\r\n        /* minutes settings */\r\n        const min = now.getMinutes();\r\n        const minDegrees = ((min / 60) * 360) + 90;\r\n        $minArrow.css('transform', `rotate(${minDegrees}deg)`);\r\n\r\n        /* hours settings */\r\n        const hours = now.getHours();\r\n        const hoursDegrees = ((hours / 12) * 360) + 90;\r\n        $hoursArrow.css('transform', `rotate(${hoursDegrees}deg)`);\r\n    }\r\n    setInterval(setDate, 1000);\r\n\r\n\r\n\r\n    /** LESSON 3 **/\r\n    const inputs = $('.input3');\r\n\r\n    function handleUpdate() {\r\n        const $suffix = $(this).attr('data-sizing') || '';\r\n        document.documentElement.style.setProperty(`--${this.name}`, this.value + $suffix);\r\n    }\r\n    inputs.each(function () {\r\n        $(this).on('change', handleUpdate);\r\n        $(this).on('mousemove', handleUpdate);\r\n    });\r\n\r\n\r\n\r\n    /** LESSON 4 **/\r\n        // Get your shorts on - this is an array workout!\r\n        // ## Array Cardio Day 1\r\n\r\n        // Some data we can work with\r\n\r\n    const inventors = [\r\n            { first: 'Albert', last: 'Einstein', year: 1879, passed: 1955 },\r\n            { first: 'Isaac', last: 'Newton', year: 1643, passed: 1727 },\r\n            { first: 'Galileo', last: 'Galilei', year: 1564, passed: 1642 },\r\n            { first: 'Marie', last: 'Curie', year: 1867, passed: 1934 },\r\n            { first: 'Johannes', last: 'Kepler', year: 1571, passed: 1630 },\r\n            { first: 'Nicolaus', last: 'Copernicus', year: 1473, passed: 1543 },\r\n            { first: 'Max', last: 'Planck', year: 1858, passed: 1947 },\r\n            { first: 'Katherine', last: 'Blodgett', year: 1898, passed: 1979 },\r\n            { first: 'Ada', last: 'Lovelace', year: 1815, passed: 1852 },\r\n            { first: 'Sarah E.', last: 'Goode', year: 1855, passed: 1905 },\r\n            { first: 'Lise', last: 'Meitner', year: 1878, passed: 1968 },\r\n            { first: 'Hanna', last: 'HammarstrÃ¶m', year: 1829, passed: 1909 }\r\n        ];\r\n\r\n    const flavours = ['Chocolate Chip', 'Kulfi', 'Caramel Praline', 'Chocolate', 'Burnt Caramel', 'Pistachio', 'Rose', 'Sweet Coconut', 'Lemon Cookie', 'Toffeeness', 'Toasted Almond', 'Black Raspberry Crunch', 'Chocolate Brownies', 'Pistachio Almond', 'Strawberry', 'Lavender Honey', 'Lychee', 'Peach', 'Black Walnut', 'Birthday Cake', 'Mexican Chocolate', 'Mocha Almond Fudge', 'Raspberry'];\r\n\r\n    const people = ['Beck, Glenn', 'Becker, Carl', 'Beckett, Samuel', 'Beddoes, Mick', 'Beecher, Henry',\r\n        'Beethoven, Ludwig', 'Begin, Menachem', 'Belloc, Hilaire', 'Bellow, Saul', 'Benchley, Robert',\r\n        'Benenson, Peter', 'Ben-Gurion, David', 'Benjamin, Walter', 'Benn, Tony', 'Bennington, Chester',\r\n        'Benson, Leana', 'Bent, Silas', 'Bentsen, Lloyd', 'Berger, Ric', 'Bergman, Ingmar', 'Berio, Luciano',\r\n        'Berle, Milton', 'Berlin, Irving', 'Berne, Eric', 'Bernhard, Sandra', 'Berra, Yogi', 'Berry, Halle',\r\n        'Berry, Wendell', 'Bethea, Erin', 'Bevan, Aneurin', 'Bevel, Ken', 'Biden, Joseph', 'Bierce, Ambrose',\r\n        'Biko, Steve', 'Billings, Josh', 'Biondo, Frank', 'Birrell, Augustine', 'Black Elk', 'Blair, Robert',\r\n        'Blair, Tony', 'Blake, William'];\r\n\r\n    // Array.prototype.filter()\r\n    // 1. Filter the list of inventors for those who were born in the 1500's\r\n    // const fifteen = inventors.filter( inventor => inventor.year >= 1500 && inventor.year < 1600);\r\n    // console.table(fifteen);\r\n\r\n    // Array.prototype.map()\r\n    // 2. Give us an array of the inventors' first and last names\r\n    // const fullNames = inventors.map(inventor => `${inventor.first} ${inventor.last}`);\r\n    // console.log(fullNames);\r\n\r\n    // Array.prototype.sort()\r\n    // 3. Sort the inventors by birthdate, oldest to youngest\r\n    // const ordered = inventors.sort((a, b) => a.year > b.year ? 1 : -1);\r\n    // console.table(ordered);\r\n\r\n    // Array.prototype.reduce()\r\n    // 4. How many years did all the inventors live?\r\n    // const totalYears = inventors.reduce((total, inventor) => {\r\n    //     return total + (inventor.passed - inventor.year);\r\n    // }, 0);\r\n    // console.log(totalYears);\r\n\r\n    // 5. Sort the inventors by years lived\r\n    // const oldest = inventors.sort(function (a, b) {\r\n    //     const  lastGuy = a.passed - a.year;\r\n    //     const  nexGuy = b.passed - b.year;\r\n    //     return lastGuy > nexGuy ? -1 : 1;\r\n    // });\r\n    // console.table(oldest);\r\n\r\n\r\n    // 6. create a list of Boulevards in Paris that contain 'de' anywhere in the name\r\n    // https://en.wikipedia.org/wiki/Category:Boulevards_in_Paris\r\n    // const category = document.querySelector('.mw-category');\r\n    // const links = [...category.querySelectorAll('a')];\r\n    // const de = links.map(link => link.textContent)\r\n    //                 .filter(streetName => streetName.includes('de'));\r\n\r\n\r\n    // 7. sort Exercise\r\n    // Sort the people alphabetically by last name\r\n    // const alpha = people.sort((lastOne, nextOne) => {\r\n    //     const [aLast, aFirst] = lastOne.split(', ');\r\n    //     const [bLast, bFirst] = nextOne.split(', ');\r\n    //     return aLast > bLast ? -1 : 1;\r\n    // });\r\n    // console.log(alpha);\r\n\r\n\r\n    // 8. Reduce Exercise\r\n    // Sum up the instances of each of these\r\n    // const data = ['car', 'car', 'truck', 'truck', 'bike', 'walk', 'car', 'van', 'bike', 'walk', 'car', 'van', 'car', 'truck' ];\r\n    // const transportation = data.reduce(function (obj, item) {\r\n    //     if(!obj[item]) {\r\n    //         obj[item] = 0;\r\n    //     }\r\n    //     obj[item]++;\r\n    //     return obj;\r\n    // }, {});\r\n    // console.log(transportation);\r\n\r\n\r\n\r\n    /** LESSON 5 **/\r\n    const panels = $('.panel');\r\n\r\n    function toggleOpen() {\r\n        if ($(this).hasClass('open')){\r\n            $(this).removeClass('open open-active');\r\n        } else {\r\n            panels.each(function () {\r\n                $(this).removeClass('open open-active');\r\n            });\r\n            $(this).addClass('open');\r\n            $(this).on('transitionend', toggleAcive);\r\n        }\r\n    }\r\n\r\n    function toggleAcive(e) {\r\n        if (e.originalEvent.propertyName.includes('flex') && $(this).hasClass('open')){\r\n            $(this).addClass('open-active');\r\n        }\r\n    }\r\n\r\n    panels.each(function () {\r\n        $(this).on('click', toggleOpen);\r\n    });\r\n\r\n\r\n\r\n    /** LESSON 6 **/\r\n    const endpoint = 'https://gist.githubusercontent.com/Miserlou/c5cd8364bf9b2420bb29/raw/2bf258763cdddd704f8ffd3ea9a3e81d25e2c6f6/cities.json';\r\n    const cities = [];\r\n    fetch(endpoint)\r\n        .then(blob => blob.json())\r\n        .then(data => cities.push(...data));\r\n\r\n    function findMatches(wordToMatch, cities) {\r\n        return cities.filter(place => {\r\n            const regex = new RegExp(wordToMatch, 'gi');\r\n            return place.city.match(regex) || place.state.match(regex);\r\n        })\r\n    }\r\n\r\n    const searchInput = $('.search'),\r\n          suggestions = $('.suggestions');\r\n    function displayMatches() {\r\n        const matchArray = findMatches(this.value, cities);\r\n        const htmlIn = matchArray.map(place => {\r\n            const regex = new RegExp(this.value, 'gi');\r\n            const cityName = place.city.replace(regex, `<span class=\"hl\">${this.value}</span>`);\r\n            const stateName = place.state.replace(regex, `<span class=\"hl\">${this.value}</span>`);\r\n\r\n            return `\r\n            <li>\r\n                <span class=\"name\">${cityName}, ${stateName}</span>\r\n                <span class=\"population\">${place.population}</span>\r\n            </li>\r\n            `;\r\n        }).join('');\r\n        suggestions.each(function () {\r\n            $(this).html(htmlIn);\r\n        });\r\n    }\r\n    searchInput.each(function () {\r\n        $(this).on('change', displayMatches);\r\n        $(this).on('keyup', displayMatches);\r\n    });\r\n\r\n\r\n\r\n    /** LESSON 7 **/\r\n    // const peopleNew = [\r\n    //     { name: 'Wes', year: 1988 },\r\n    //     { name: 'Kait', year: 1986 },\r\n    //     { name: 'Irv', year: 1970 },\r\n    //     { name: 'Lux', year: 2015 }\r\n    // ];\r\n    //\r\n    // const commentsNew = [\r\n    //     { text: 'Love this!', id: 523423 },\r\n    //     { text: 'Super good', id: 823423 },\r\n    //     { text: 'You are the best', id: 2039842 },\r\n    //     { text: 'Ramen is my fav food ever', id: 123523 },\r\n    //     { text: 'Nice Nice Nice!', id: 542328 }\r\n    // ];\r\n    //\r\n    // // Some and Every Checks\r\n    // // Array.prototype.some() // is at least one person 19 or older?\r\n    // const isAdult = peopleNew.some(function (person) {\r\n    //     const currentYear = (new Date()).getFullYear();\r\n    //     if (currentYear - person.year >= 19) {\r\n    //         return true;\r\n    //     }\r\n    // });\r\n    // const isAdultShort = peopleNew.some(person => ( (new Date()).getFullYear()) - person.year >= 19 );\r\n    // console.log({isAdultShort});\r\n    //\r\n    // // Array.prototype.every() // is everyone 19 or older?\r\n    // const allAdultShort = peopleNew.every(person => ( (new Date()).getFullYear()) - person.year >= 19 );\r\n    // console.log({allAdultShort});\r\n    //\r\n    // // Array.prototype.find()\r\n    // // Find is like filter, but instead returns just the one you are looking for\r\n    // // find the comment with the ID of 823423\r\n    // const comment = commentsNew.find(function (comment) {\r\n    //     if (comment.id === 823423) {\r\n    //         return true\r\n    //     }\r\n    // });\r\n    // console.log(comment);\r\n    //\r\n    // const commentShort = commentsNew.find(comment => comment.id === 823423);\r\n    // console.log(commentShort);\r\n    //\r\n    // // Array.prototype.findIndex()\r\n    // // Find the comment with this ID\r\n    // // delete the comment with the ID of 823423\r\n    // const index = commentsNew.findIndex(comment => comment.id === 823423 );\r\n    //\r\n    // //commentsNew.splice(index, 1);\r\n    //\r\n    // const newCommentsNew = [\r\n    //     ...commentsNew.slice(0, index),\r\n    //     ...commentsNew.slice(index + 1)\r\n    // ];\r\n    // console.log(index);\r\n    // console.table(newCommentsNew);\r\n\r\n\r\n\r\n    /** LESSON 8 **/\r\n    // const canvas = document.querySelector('#draw');\r\n    // function canvasSize() {\r\n    //     canvas.width = window.innerWidth;\r\n    //     canvas.height = window.innerHeight;\r\n    // }\r\n    // canvasSize();\r\n    // $(window).resize(canvasSize);\r\n    //\r\n    // const ctx = canvas.getContext('2d');\r\n    // ctx.strokeStyle = 'BADA55';\r\n    // ctx.lineJoin = 'round';\r\n    // ctx.lineCap = 'round';\r\n    // ctx.lineWidth = 50;\r\n    //\r\n    // let isDrawing = false;\r\n    // let lastX = 0;\r\n    // let lastY = 0;\r\n    // let hue = 0;\r\n    // let direct = true;\r\n    //\r\n    // function draw(e) {\r\n    //     if(!isDrawing) return;\r\n    //     console.log(ctx.lineWidth);\r\n    //\r\n    //     ctx.strokeStyle = `hsl(${hue}, 100%, 50%)`;\r\n    //     ctx.beginPath();\r\n    //     ctx.moveTo(lastX, lastY);\r\n    //     ctx.lineTo(e.offsetX, e.offsetY);\r\n    //     ctx.stroke();\r\n    //     [lastX, lastY] = [e.offsetX, e.offsetY];\r\n    //\r\n    //     hue++;\r\n    //     if (hue > 360) {\r\n    //         hue = 0;\r\n    //     }\r\n    //     if (ctx.lineWidth >= 50 || ctx.lineWidth < 1) {\r\n    //         direct = !direct;\r\n    //     }\r\n    //     if(direct){\r\n    //         ctx.lineWidth += 1/5;\r\n    //     } else {\r\n    //         ctx.lineWidth -= 1/5;\r\n    //     }\r\n    // }\r\n    // canvas.addEventListener('mousemove', draw);\r\n    // canvas.addEventListener('mousedown', (e) => {\r\n    //     isDrawing = true;\r\n    //     [lastX, lastY] = [e.offsetX, e.offsetY];\r\n    // });\r\n    // canvas.addEventListener('mouseup', () => isDrawing = false);\r\n    // canvas.addEventListener('mouseout', () => isDrawing = false);\r\n\r\n\r\n\r\n    /** LESSON 9 **/\r\n    const dogs = [{ name: 'Snickers', age: 2 }, { name: 'hugo', age: 8 }];\r\n\r\n    $('#lesson9').on('click', makeGreen);\r\n    function makeGreen() {\r\n        $(this).css({\r\n            'color': '#BADA55',\r\n            'font-size': '50px'\r\n        })\r\n    }\r\n\r\n    // Regular\r\n    console.log('hi');\r\n\r\n    // Interpolated\r\n    console.log('hi my name is %s', 'Viktor');\r\n\r\n    // Styled\r\n    console.log('%cHi, it\\'s a blue string', 'color:blue');\r\n\r\n    // warning!\r\n    console.warn('NOOOOOOO!');\r\n\r\n    // Error :|\r\n    console.error('FUUUUUCK!');\r\n\r\n    // Info\r\n    console.info('Some info');\r\n\r\n    // Testing\r\n    // const testPar = $('p')[0];\r\n    // console.assert(testPar.classList.contains('test'), 'Lol, go get some coffee!');\r\n\r\n    // clearing\r\n    console.clear();\r\n\r\n    // Viewing DOM Elements\r\n    // console.dir(testPar);\r\n    // console.clear();\r\n\r\n    // Grouping together\r\n    $.each(dogs, function () {\r\n        console.groupCollapsed(`${this.name}`);\r\n        console.log(`Name of the dog is ${this.name}`);\r\n        console.log(`${this.name} is ${this.age} years old`);\r\n        console.log(`${this.name} is ${this.age * 7} dog years old`);\r\n        console.groupEnd(`${this.name}`);\r\n    });\r\n\r\n    // counting\r\n    console.count('Victor');\r\n    console.count('Valerie');\r\n    console.count('Valerie');\r\n    console.count('Valerie');\r\n    console.count('Valerie');\r\n    console.count('Valerie');\r\n    console.count('Valerie');\r\n    console.count('Valerie');\r\n    console.count('Victor');\r\n    console.count('Victor');\r\n    console.count('Victor');\r\n    console.clear();\r\n    // $(document).on('mousemove', function () {\r\n    //     console.count('Hi');\r\n    //     console.log('Bye');\r\n    // });\r\n\r\n    // timing\r\n    // console.time('fetching data');\r\n    // fetch('https://api.github.com/users/wesbos')\r\n    //     .then(data => data.json())\r\n    //     .then(data => {\r\n    //         console.timeEnd('fetching data');\r\n    //         console.log(data);\r\n    //     });\r\n\r\n\r\n\r\n    /** LESSON 10 **/\r\n    // const checkboxes = $('.inbox input[type=\"checkbox\"]');\r\n    // let lastChecked;\r\n    // function handleCheck(e) {\r\n    //     let inBetween = false;\r\n    //     if(e.shiftKey && this.checked){\r\n    //         [...checkboxes].forEach(checkbox => {\r\n    //             console.log(checkbox);\r\n    //             if(checkbox === this || checkbox === lastChecked){\r\n    //                 inBetween = !inBetween;\r\n    //                 console.log('-------------');\r\n    //             }\r\n    //             if (inBetween) {\r\n    //                 checkbox.checked = true;\r\n    //             }\r\n    //         })\r\n    //     }\r\n    //     lastChecked = this;\r\n    // }\r\n    //\r\n    // checkboxes.each(function () {\r\n    //     $(this).on('click', handleCheck)\r\n    // });\r\n\r\n\r\n\r\n    /** LESSON 11 **/\r\n    // elements\r\n    // const player = $('.player'),\r\n    //       video = $('.viewer'),\r\n    //       progress = $('.progress'),\r\n    //       progressBar = $('.progress__filled'),\r\n    //       toggle = $('.toggle'),\r\n    //       skipButtons = $('[data-skip]'),\r\n    //       ranges = $('.player__slider');\r\n    // //functions\r\n    // function togglePlay() {\r\n    //     const method = video[0].paused ? 'play' : 'pause';\r\n    //     video[0][method]();\r\n    // }\r\n    // function updateButton() {\r\n    //     const icon = this.paused ? 'âº' : 'â â';\r\n    //     toggle.text(icon);\r\n    // }\r\n    // function skip() {\r\n    //     video[0].currentTime += parseFloat(this.dataset.skip);\r\n    // }\r\n    // function handleRangeUpdate() {\r\n    //     video[0][this.name] = this.value;\r\n    // }\r\n    // function handleProgress() {\r\n    //     const percent = (video[0].currentTime / video[0].duration) * 100;\r\n    //     progressBar.css({\r\n    //         'flex-basis': `${percent}%`\r\n    //     });\r\n    // }\r\n    // function scrub(e) {\r\n    //     const scrubTime = (e.originalEvent.offsetX / progress.width()) * video[0].duration;\r\n    //     video[0].currentTime = scrubTime;\r\n    //     console.log(e.originalEvent);\r\n    // }\r\n    //\r\n    // //making work\r\n    // video.on('click', togglePlay);\r\n    // video.on('play', updateButton);\r\n    // video.on('pause', updateButton);\r\n    //\r\n    // toggle.on('click', togglePlay);\r\n    //\r\n    // skipButtons.on('click', skip);\r\n    //\r\n    // ranges.on('change', handleRangeUpdate);\r\n    // ranges.on('mousemove', handleRangeUpdate);\r\n    //\r\n    // let mouseDown = false;\r\n    // video.on('timeupdate', handleProgress);\r\n    // progress.on('click', scrub);\r\n    // progress.on('mousemove', (e) => mouseDown && scrub(e));\r\n    // progress.on('mousedown', () => mouseDown = true);\r\n    // progress.on('mouseup', () => mouseDown = false);\r\n\r\n\r\n\r\n    /** LESSON 12 **/\r\n    // const pressed = [];\r\n    // const secretCode = 'wesbos';\r\n    // $(window).on('keyup', (e) => {\r\n    //     pressed.push(e.key);\r\n    //     pressed.splice(-secretCode.length - 1, pressed.length - secretCode.length);\r\n    //     if(pressed.join('').includes(secretCode)){\r\n    //         cornify_add();\r\n    //     }\r\n    // });\r\n\r\n\r\n\r\n    /** LESSON 13 **/\r\n    // function debounce(func, wait = 20, immediate = true) {\r\n    //     var timeout;\r\n    //     return function() {\r\n    //         var context = this, args = arguments;\r\n    //         var later = function() {\r\n    //             timeout = null;\r\n    //             if (!immediate) func.apply(context, args);\r\n    //         };\r\n    //         var callNow = immediate && !timeout;\r\n    //         clearTimeout(timeout);\r\n    //         timeout = setTimeout(later, wait);\r\n    //         if (callNow) func.apply(context, args);\r\n    //     };\r\n    // }\r\n    //\r\n    // const sliderImages = $('.slide-in');\r\n    //\r\n    // function checkSlide(e) {\r\n    //     sliderImages.each(function () {\r\n    //         const slideInAt = window.scrollY + window.innerHeight - ($(this).height() / 2);\r\n    //         const imageBottom = $(this).offset().top + $(this).height();\r\n    //         const isHalfShown = slideInAt > $(this).offset().top;\r\n    //         const isNotScrollerPassed = window.scrollY < imageBottom;\r\n    //         if (isHalfShown && isNotScrollerPassed) {\r\n    //             $(this).addClass('active');\r\n    //         } else {\r\n    //             $(this).removeClass('active');\r\n    //         }\r\n    //     })\r\n    // }\r\n    //\r\n    // $(window).on('scroll', debounce(checkSlide));\r\n\r\n\r\n\r\n    /** LESSON 14 **/\r\n        // start with strings, numbers and booleans\r\n    let age = 100;\r\n    let age2 = age;\r\n    console.log(age, age2);\r\n    age = 200;\r\n    console.log(age, age2);\r\n    console.clear();\r\n\r\n\r\n        // Let's say we have an array\r\n    const players = ['Wes', 'Sarah', 'Ryan', 'Poppy'];\r\n\r\n    // and we want to make a copy of it.\r\n    const team = players;\r\n    console.log(team, players);\r\n\r\n    // You might think we can just do something like this:\r\n    team[3] = 'Viktor';\r\n    console.log(team, players);\r\n\r\n    // however what happens when we update that array?\r\n\r\n    // now here is the problem!\r\n\r\n    // oh no - we have edited the original array too!\r\n\r\n    // Why? It's because that is an array reference, not an array copy. They both point to the same array!\r\n\r\n    // So, how do we fix this? We take a copy instead!\r\n    const team2 = players.slice();\r\n    team2[3] = 'Valerie';\r\n    console.log(players, team2);\r\n\r\n\r\n    // one day\r\n\r\n    // or create a new array and concat the old one in\r\n    const team3 = [].concat(players);\r\n    team3[3] = 'Evkakiy';\r\n    console.log(players, team3);\r\n\r\n    // or use the new ES6 Spread\r\n    const team4 = [...players];\r\n    team4[3] = 'Ololo';\r\n    console.log(players, team4);\r\n\r\n    //or use global Array object\r\n    const team5 = Array.from(players);\r\n    team5[3] = 'LastOne';\r\n    console.log(players, team5);\r\n\r\n    console.clear();\r\n\r\n    // now when we update it, the original one isn't changed\r\n\r\n    // The same thing goes for objects, let's say we have a person object\r\n\r\n    // with Objects\r\n    const person14 = {\r\n        name: 'Viktor',\r\n        age: 80\r\n    };\r\n\r\n    // and think we make a copy:\r\n    const newPerson = person14;\r\n    console.log(person14, newPerson);\r\n    newPerson.number = 99;\r\n    console.log(person14, newPerson);\r\n\r\n    // how do we take a copy instead?\r\n    const newPerson2 = Object.assign({}, person14, {number: 50, age: 12});\r\n    console.log(person14, newPerson2);\r\n    console.clear();\r\n\r\n\r\n    // We will hopefully soon see the object ...spread\r\n    // const newPerson3 = {...person14};\r\n    // newPerson3.age = 24;\r\n    // console.log(person14, newPerson3);\r\n\r\n    // Things to note - this is only 1 level deep - both for Arrays and Objects. lodash has a cloneDeep method, but you should think twice before using it.\r\n    const viktor = {\r\n        name: 'Viktor',\r\n        age: 25,\r\n        social: {\r\n            git: 'pixelpusher92',\r\n            mail: 'lifeislife1992'\r\n        }\r\n    };\r\n    console.log(viktor);\r\n    console.time('Object copy');\r\n    const viktor2 = Object.assign({}, viktor);\r\n    console.timeEnd('Object copy');\r\n    viktor2.name = 'Vitek';\r\n    console.log(viktor, viktor2);\r\n    viktor2.social.git = 'someNewName';\r\n    console.log(viktor.social, viktor2.social);\r\n\r\n    //another cheat, but not recommended\r\n    console.time('JSCN parse');\r\n    const viktor3 = JSON.parse(JSON.stringify(viktor));\r\n    console.timeEnd('JSCN parse');\r\n    viktor3.social.mail = 'viktor_yuriew';\r\n    console.log(viktor.social, viktor3.social);\r\n});\r\n"]}